Metadata-Version: 2.1
Name: trading-algorithm-framework-devonindustries
Version: 0.1.0
Summary: Framework for trading algorithms
Home-page: https://github.com/devonindustries/trading_algorithm_framework
Author: Joshua Baker
Author-email: jd.baker01@hotmail.co.nz
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/devonindustries/trading_algorithm_framework/issues
Description: # Trading Algorithm Framework
        
        A module containing useful packages for testing and writing trading algorithms. The idea of this package is to simulate a stock exchange allowing an algorithm to enter or leave positions. The user will be able to evaluate the performance of the algorithm using various tools available in this package.
        
        ## Portfolios
        
        To test a trading algorithm, we must first define an instance of the ‘Portfolio’ class:
        
        ```
        from portfolio import *
        
        pf = Portfolio(balance=50000)
        ```
        
        This will define a new instance of the ‘Portfolio’ class. Normally we don’t need to specify the starting balance as it defaults to 50k on declaration.
        
        The Portfolio class has a number of attributes associated with it, but the ones that we are most interested in are the `buy`, `sell`, and `sell_all` methods.
        
        We can buy and sell stocks from the ‘Stock’ class. For now this is a bit messy, but will be taken care of for the user later in development. 
        
        ## Stocks
        
        New instances of the ‘Stock’ class require a Pandas data frame for their data. We’ll use the Apple Inc. stock data for this example:
        
        ```
        import pandas as pd
        from stock import *
        
        aapl_data = pd.read_csv(‘AAPL_data.csv’, index_col=0)
        
        aapl_stock = Stock(‘AAPL’, aapl_data)
        ```
        
        Now with the `Stock` class defined, we can enter and exit different positions. The stock class uses instances of the ‘Point’ class to store each data point, so any time we want to enter a position we will need to convert one of them to an instance of either the `Share` or `Option` classes.
        
        ```
        def point_to_share(point, volume):
        	return Share(
        		point.close_price,
        		volume
        	)
        
        # Select the first date in the pack
        purchase_date = aapl_data.index[0]
        
        new_share = point_to_share(
        	aapl_stock.history[purchase_date],
        	1
        )
        
        # Enter a long position
        pf.buy(
        	aapl_stock.get_symbol(),
        	‘long’,
        	new_share,
        	purchase_date
        )
        ```
        
        Now that we’ve entered a long position, we can check the portfolio `balance`, as well as its open positions, exposure, and its percentage holdings in each stock (which is accessed using `get_holdings()`).
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
